// import mongoose from "mongoose";
// import bcrypt from "bcryptjs";

// const userSchema = mongoose.Schema({

//     name: {
//         type: String,
//         required: true
//     },
//     email: {
//         type: String,
//         required: true,
//         unique: true
//     },
//     password: {
//         type: String,
//         required: true
//     },
// organizationName:{
//     type: String,
//     required: true
// },
// // contactNumber:{
// //     type: String
// // },
// organizationlocation:{
//     type: String
// },
// organizationNumber:{
//     type: String
// },
// userlocation:{
//     type: String
// },
// lastLogin: {
//     type: Date,
//     default: Date.now,
// },
// profileImageName: {
//     type: String
// },
// //For authentication user model
//     phone: String,
//     accountVerified: {type: Boolean, default: false},
//     verificationCode: Number,
//     verificationCodeExpire: Date,
//     resetPasswordToken: String,
//     resetPasswordExpire: Date,
//     createdAt: {
//         type: Date,
//         default: Date.now,
//     }

// },{

//     timestamps: true // This will automatically add timestamps for any operations done.

// });


// // ============= Password Hashing Middleware =============
// userSchema.pre('save', async function (next) {

//     if( !this.isModified('password') ) {

//         next();

//         // If the existing password in user schema was not modified, then avoid hashing and move to next middleware
//         // This check is done here because the user schema will have other updates which dosen't involve password updation
//         // in that case rehashing password will be skipped

//     }

//     const salt = await bcrypt.genSalt(10);

//     // Hashing the new password using the salt generated by bcrypt
//     this.password = await bcrypt.hash(this.password, salt);

// });


// // ============= Password Verifying Function =============
// userSchema.methods.matchPassword = async function (userProvidedPassword) {

//     const validPassword = await bcrypt.compare(userProvidedPassword, this.password);

//     return validPassword;

// };











// userSchema.methods.comparePassword = async function (enteredPassword) {
//     return await bcrypt.compare(enteredPassword, this.password);
//   };


// userSchema.methods.generateVerificationCode = function () {
//     function generateRandomFiveDigitNumber() {
//       const firstDigit = Math.floor(Math.random() * 9) + 1;
//       const remainingDigits = Math.floor(Math.random() * 10000)
//         .toString()
//         .padStart(4, 0);

//       return parseInt(firstDigit + remainingDigits);
//     }
//     const verificationCode = generateRandomFiveDigitNumber();
//     this.verificationCode = verificationCode;
//     this.verificationCodeExpire = Date.now() + 10 * 60 * 1000;

//     return verificationCode;
//   };



//   userSchema.methods.generateToken = async function () {
//     return await jwt.sign({ id: this._id }, process.env.JWT_SECRET_KEY, {
//       expiresIn: process.env.JWT_EXPIRE,
//     });
//   };

//   userSchema.methods.generateResetPasswordToken = function () {
//     const resetToken = crypto.randomBytes(20).toString("hex");

//     this.resetPasswordToken = crypto
//       .createHash("sha256")
//       .update(resetToken)
//       .digest("hex");

//     this.resetPasswordExpire = Date.now() + 15 * 60 * 1000;

//     return resetToken;
//   };


// const User = mongoose.model.User || mongoose.model('User', userSchema);

// // const User = mongoose.model('User', userSchema);

// export default User;




























import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import crypto from "crypto";

const userSchema = mongoose.Schema({

  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    minLength: [8, 'Password must have at least 8 characters.'],
    select: false,
    required: true
  }, 
  organizationName: {
    type: String,
  },
  // contactNumber:{
  //     type: String
  // },
  organizationlocation: {
    type: String
  },
  organizationNumber: {
    type: String
  },
  userlocation: {
    type: String
  },
  lastLogin: {
    type: Date,
    default: Date.now,
  },
  profileImageName: {
    type: String
  },

  //For authentication user model
  phone: String,
  accountVerified: { type: Boolean, default: false },
  verificationCode: Number,
  verificationCodeExpire: Date,
  resetPasswordToken: String,
  resetPasswordExpire: Date,
  createdAt: {
    type: Date,
    default: Date.now,
  }

}, {

  timestamps: true

});


userSchema.pre('save', async function (next) {

  if (!this.isModified('password')) {

    next();


  }

  const salt = await bcrypt.genSalt(10);

  this.password = await bcrypt.hash(this.password, salt);

});


userSchema.methods.matchPassword = async function (userProvidedPassword) {

  const validPassword = await bcrypt.compare(userProvidedPassword, this.password);

  return validPassword;

};

userSchema.methods.comparePassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};


userSchema.methods.generateVerificationCode = function () {
  function generateRandomFiveDigitNumber() {
    const firstDigit = Math.floor(Math.random() * 9) + 1;
    const remainingDigits = Math.floor(Math.random() * 10000)
      .toString()
      .padStart(4, 0);

    return parseInt(firstDigit + remainingDigits);
  }
  const verificationCode = generateRandomFiveDigitNumber();
  this.verificationCode = verificationCode;
  this.verificationCodeExpire = Date.now() + 10 * 60 * 1000;

  return verificationCode;
};



userSchema.methods.generateToken = async function () {
  return await jwt.sign({ id: this._id }, process.env.JWT_SECRET_KEY, {
    expiresIn: process.env.JWT_EXPIRE,
  });
};

userSchema.methods.generateResetPasswordToken = function () {
  const resetToken = crypto.randomBytes(20).toString("hex");

  this.resetPasswordToken = crypto
    .createHash("sha256")
    .update(resetToken)
    .digest("hex");

  this.resetPasswordExpire = Date.now() + 15 * 60 * 1000;

  return resetToken;
};


const User = mongoose.model.User || mongoose.model('User', userSchema);

//const User = mongoose.model('User', userSchema);

export default User;